#pragma once
#include "abc.h"
__ywstd_cfunc_begin
using clock_t = long;
using time_t = long long;
struct _timespec64 { long long tv_sec; long tv_nsec; };
struct timespec { long long tv_sec; long tv_nsec; };
long __cdecl clock();
char* __cdecl asctime(const tm*);
size_t __cdecl strftime(char*, size_t, const char*, const tm*);
char* __cdecl _ctime64(const long long*);
double __cdecl _difftime64(long long, long long);
tm* __cdecl _gmtime64(const long long*);
tm* __cdecl _localtime64(const long long*);
long long __cdecl _mktime64(tm*);
long long __cdecl _time64(long long*);
int __cdecl _timespec64_get(_timespec64*, int);
__ywstd_cfunc_end
__ywstd_export namespace std {
using clock_t = long;
using time_t = long long;
using __time64_t = long long;
using __ywstd_cfunc timespec;
using __ywstd_cfunc clock;
using __ywstd_cfunc asctime;
using __ywstd_cfunc strftime;

inline char* ctime(const time_t* t) noexcept { return __ywstd_cfunc _ctime64(t); }
inline double difftime(time_t t1, time_t t2) noexcept { return __ywstd_cfunc _difftime64(t1, t2); }
inline tm* gmtime(const time_t* t) noexcept { return __ywstd_cfunc _gmtime64(t); }
inline tm* localtime(const time_t* t) noexcept { return __ywstd_cfunc _localtime64(t); }
inline time_t mktime(tm* t) noexcept { return __ywstd_cfunc _mktime64(t); }
inline time_t time(time_t* t) noexcept { return __ywstd_cfunc _time64(t); }

inline int timespec_get(timespec* ts, int base) noexcept {
  return __ywstd_cfunc _timespec64_get(reinterpret_cast<_timespec64*>(ts), base);
}
}
