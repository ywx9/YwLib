/// \file cstdlib
/// \copyright (c) 2025 ywx9.com

// clang-format off
#pragma once
#include "abc.h"

////////////////////////////////////////////////////////////////////////////////
// internal definitions

#if __ywstd_is_exported
extern "C" {
struct div_t { int quot, rem; };
struct ldiv_t { long quot, rem; };
struct lldiv_t { long long quot, rem; };
using atexit_handler = void (__cdecl*)();
int __cdecl atexit(atexit_handler);
int __cdecl at_quick_exit(atexit_handler);
[[noreturn]] void __cdecl abort();
[[noreturn]] void __cdecl exit(int);
[[noreturn]] void __cdecl _Exit(int);
[[noreturn]] void __cdecl quick_exit(int);
char* __cdecl getenv(const char*);
int __cdecl system(const char*);
void __cdecl free(void*);
__declspec(allocator) void* __cdecl malloc(size_t);
__declspec(allocator) void* __cdecl calloc(size_t, size_t);
__declspec(allocator) void* __cdecl realloc(void*, size_t);
using compare_pred = int (__cdecl*)(const void*, const void*);
void __cdecl qsort(void*, size_t, size_t, compare_pred);
void* __cdecl bsearch(const void*, const void*, size_t, size_t, compare_pred);
int __cdecl mblen(const char*, size_t);
int __cdecl mbtowc(wchar_t*, const char*, size_t);
int __cdecl wctomb(char*, wchar_t);
size_t __cdecl mbstowcs(wchar_t*, const char*, size_t);
size_t __cdecl wcstombs(char*, const wchar_t*, size_t);
int __cdecl atoi(const char*);
long __cdecl atol(const char*);
long long __cdecl atoll(const char*);
double __cdecl atof(const char*);
long __cdecl strtol(const char*, char**, int);
long long __cdecl strtoll(const char*, char**, int);
unsigned long __cdecl strtoul(const char*, char**, int);
unsigned long long __cdecl strtoull(const char*, char**, int);
float __cdecl strtof(const char*, char**);
double __cdecl strtod(const char*, char**);
long double __cdecl strtold(const char*, char**);
int __cdecl rand();
void __cdecl srand(unsigned);
int __cdecl abs(int);
long __cdecl labs(long);
long long __cdecl llabs(long long);
div_t __cdecl div(int, int);
ldiv_t __cdecl ldiv(long, long);
lldiv_t __cdecl lldiv(long long, long long);
}
export namespace std {
using ::div_t;
using ::ldiv_t;
using ::lldiv_t;
}
#endif

////////////////////////////////////////////////////////////////////////////////
// dummy definitions

#if !__ywstd_is_exported && !__ywstd_is_imported
namespace std {
struct div_t { int quot, rem; };
struct ldiv_t { long quot, rem; };
struct lldiv_t { long long quot, rem; };
}
#endif

////////////////////////////////////////////////////////////////////////////////
// public definitions

#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0
#define RAND_MAX 0x7FFF
#define MB_CUR_MAX (::__mb_cur_max_func())

#if !__ywstd_is_imported
__ywstd_export extern "C" int __cdecl ___mb_cur_max_func();
__ywstd_export namespace std {
using size_t = decltype(sizeof(0));
using atexit_handler = void (__cdecl*)();
inline int __cdecl atexit(atexit_handler f) noexcept { return __ywstd_switch(::atexit(f), {}); }
inline int __cdecl at_quick_exit(atexit_handler f) noexcept { return __ywstd_switch(::at_quick_exit(f), {}); }
[[noreturn]] inline void __cdecl abort() noexcept { __ywstd_switch(::abort(), void(0)); }
[[noreturn]] inline void __cdecl exit(int status) noexcept { __ywstd_switch(::exit(status), void(0)); }
[[noreturn]] inline void __cdecl _Exit(int status) noexcept { __ywstd_switch(::_Exit(status), void(0)); }
[[noreturn]] inline void __cdecl quick_exit(int status) noexcept { __ywstd_switch(::quick_exit(status), void(0)); }
inline char* __cdecl getenv(const char* name) noexcept { return __ywstd_switch(::getenv(name), {}); }
inline int __cdecl system(const char* command) noexcept { return __ywstd_switch(::system(command), {}); }
inline void __cdecl free(void* ptr) noexcept { __ywstd_switch(::free(ptr), void(0)); }
inline __declspec(allocator) void* __cdecl malloc(size_t size) noexcept { return __ywstd_switch(::malloc(size), {}); }
inline __declspec(allocator) void* __cdecl calloc(size_t num, size_t size) noexcept { return __ywstd_switch(::calloc(num, size), {}); }
inline __declspec(allocator) void* __cdecl realloc(void* ptr, size_t size) noexcept { return __ywstd_switch(::realloc(ptr, size), {}); }
using compare_pred = int (__cdecl*)(const void*, const void*);
inline void __cdecl qsort(void* base, size_t num, size_t size, compare_pred pred) noexcept { __ywstd_switch(::qsort(base, num, size, pred), void(0)); }
inline void* __cdecl bsearch(const void* key, const void* base, size_t num, size_t size, compare_pred pred) noexcept { return __ywstd_switch(::bsearch(key, base, num, size, pred), {}); }
inline int __cdecl mblen(const char* s, size_t n) noexcept { return __ywstd_switch(::mblen(s, n), {}); }
inline int __cdecl mbtowc(wchar_t* pwc, const char* s, size_t n) noexcept { return __ywstd_switch(::mbtowc(pwc, s, n), {}); }
inline int __cdecl wctomb(char* s, wchar_t wc) noexcept { return __ywstd_switch(::wctomb(s, wc), {}); }
inline size_t __cdecl mbstowcs(wchar_t* pwcs, const char* s, size_t n) noexcept { return __ywstd_switch(::mbstowcs(pwcs, s, n), {}); }
inline size_t __cdecl wcstombs(char* s, const wchar_t* pwcs, size_t n) noexcept { return __ywstd_switch(::wcstombs(s, pwcs, n), {}); }
inline int __cdecl atoi(const char* s) noexcept { return __ywstd_switch(::atoi(s), {}); }
inline long __cdecl atol(const char* s) noexcept { return __ywstd_switch(::atol(s), {}); }
inline long long __cdecl atoll(const char* s) noexcept { return __ywstd_switch(::atoll(s), {}); }
inline double __cdecl atof(const char* s) noexcept { return __ywstd_switch(::atof(s), {}); }
inline long __cdecl strtol(const char* s, char** end, int base) noexcept { return __ywstd_switch(::strtol(s, end, base), {}); }
inline long long __cdecl strtoll(const char* s, char** end, int base) noexcept { return __ywstd_switch(::strtoll(s, end, base), {}); }
inline unsigned long __cdecl strtoul(const char* s, char** end, int base) noexcept { return __ywstd_switch(::strtoul(s, end, base), {}); }
inline unsigned long long __cdecl strtoull(const char* s, char** end, int base) noexcept { return __ywstd_switch(::strtoull(s, end, base), {}); }
inline float __cdecl strtof(const char* s, char** end) noexcept { return __ywstd_switch(::strtof(s, end), {}); }
inline double __cdecl strtod(const char* s, char** end) noexcept { return __ywstd_switch(::strtod(s, end), {}); }
inline long double __cdecl strtold(const char* s, char** end) noexcept { return __ywstd_switch(::strtold(s, end), {}); }
inline int __cdecl rand() noexcept { return __ywstd_switch(::rand(), {}); }
inline void __cdecl srand(unsigned seed) noexcept { __ywstd_switch(::srand(seed), void(0)); }

constexpr int abs(int i) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::abs(i), {});
  else return i < 0 ? -i : i;
}
constexpr long labs(long i) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::labs(i), {});
  else return i < 0 ? -i : i;
}
constexpr long long llabs(long long i) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::llabs(i), {});
  else return i < 0 ? -i : i;
}
constexpr div_t div(int num, int den) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::div(num, den), {});
  else return {num / den, num % den};
}
constexpr ldiv_t ldiv(long num, long den) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::ldiv(num, den), {});
  else return {num / den, num % den};
}
constexpr lldiv_t lldiv(long long num, long long den) noexcept {
  if (!__builtin_is_constant_evaluated()) return __ywstd_switch(::lldiv(num, den), {});
  else return {num / den, num % den};
}
}
#endif
