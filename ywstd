#pragma once /* clang-format off */ /* Python code start
import os, sys, subprocess
HERE = os.path.dirname(os.path.abspath(__file__))
IFC  = fR"{HERE}\ywstd.ifc"
IXX  = fR"{HERE}\ywstd.ixx"
OBJ  = fR"{HERE}\ywstd.obj"
CL   = fR"{HERE}\msvc\bin\cl.exe"

def fail(file, return_code):
  print(f"failed to compile {file} -> {return_code}")
  sys.exit(return_code)

if len(sys.argv) == 1 or "--all" in sys.argv:
  if os.path.exists(IFC): os.remove(IFC)
  if os.path.exists(OBJ): os.remove(OBJ)
  with open(IXX, "w") as f:
    f.write("export module ywstd;\n#include \"ywstd\"\n")
  args = [CL, IXX, "/c", "/D__ywstd_export=export", ]
  args+= ["/std:c++latest", "/EHsc", "/nologo", "/MT", "/W4", "/O2", "/Qpar", "/utf-8", ]
  args+= [f"/ifcOutput{IFC}", f"/Fo{OBJ}", fR"/I{HERE}\hack", fR"/I{HERE}\msvc\inc", ]
  print("compiling ", end="", flush=True)
  return_code = subprocess.run(args).returncode
  if return_code != 0: fail("ywstd", return_code)
  if os.path.exists(IXX): os.remove(IXX)
  if not "--all" in sys.argv: sys.exit(return_code)

cpp_file = sys.argv[1]
if (os.path.splitext(cpp_file)[1] != ".cpp"): print("Usage: python ywstd [<cpp_file> [--run]]")
exe_file, obj_file = cpp_file.replace(".cpp", ".exe"), cpp_file.replace(".cpp", ".obj")
args = [CL, cpp_file, f"/Fe{exe_file}", f"/Fo{obj_file}", "/D__ywstd_import", ]
args+= ["/std:c++latest", "/EHsc", "/nologo", "/MT", "/W4", "/O2", "/Qpar", "/utf-8", ]
args+= [f"/referenceywstd={IFC}", "/link", OBJ, fR"/LIBPATH:{HERE}\msvc\lib", ]
print("compiling ", end="", flush=True)
return_code = subprocess.run(args).returncode
if os.path.exists(obj_file): os.remove(obj_file)
if return_code != 0: fail(cpp_file, return_code)
if "--run" in sys.argv:
  print(f"running {exe_file}")
  print(f"{exe_file} returns {subprocess.run([exe_file]).returncode}")
sys.exit(0)

# Python code end */

#include "hack/abc.h"
#include "hack/xyz.h"
