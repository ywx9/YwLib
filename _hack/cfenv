/// \file cfenv
/// \copyright (c) 2025 ywx9.com

#pragma once
#include "abc.h"

#define FE_TONEAREST 0x000
#define FE_DOWNWARD 0x100
#define FE_UPWARD 0x200
#define FE_TOWARDZERO 0x300

#define FE_INEXACT 0x01
#define FE_UNDERFLOW 0x02
#define FE_OVERFLOW 0x04
#define FE_DIVBYZERO 0x08
#define FE_INVALID 0x10
#define FE_ALL_EXCEPT 0x1f

#define FE_DFL_ENV __ywstd_switch((&::_Fenv1), (&::__ywstd_dummy_object<std::fenv_t>))

#if __ywstd_is_exported
extern "C" {
using fexcept_t = unsigned long;
int __cdecl fegetround();
int __cdecl fesetround(int);
int __cdecl fegetenv(fenv_t*);
int __cdecl fesetenv(const fenv_t*);
int __cdecl feclearexcept(int);
int __cdecl feholdexcept(fenv_t*);
int __cdecl fetestexcept(int);
int __cdecl fegetexceptflag(fexcept_t*, int);
int __cdecl fesetexceptflag(const fexcept_t*, int);
export __declspec(selectany) extern const fenv_t _Fenv1{0x3f00003f, 0};

#pragma optimize("", off)
inline int __cdecl feraiseexcept(int except) {
  static struct { int except; double num, den; } const table[] =
    {{FE_INVALID, 0.0, 0.0},
    {FE_DIVBYZERO, 1.0, 0.0},
    {FE_OVERFLOW, 1e+300, 1e-300},
     {FE_UNDERFLOW, 1e-300, 1e+300},
     {FE_INEXACT, 2.0, 3.0}};
  double ans = 0.0; (void) ans;
  if ((except &= FE_ALL_EXCEPT) == 0) return 0;
  for (size_t i = 0; i < sizeof(table) / sizeof(table[0]); ++i)
    if ((except & table[i].except) != 0) ans = table[i].num / table[i].den;
  return 0;
}
#pragma optimize("", on)
}
#endif

#if !__ywstd_is_imported
__ywstd_export namespace std {

using fexcept_t = unsigned long;

/// clears the specified floating-point status flags
inline int __cdecl feclearexcept(int except) {
  return __ywstd_switch(::feclearexcept(except), {});
}

/// determines which of the specified floating-point status flags are set
inline int __cdecl fetestexcept(int except) {
  return __ywstd_switch(::fetestexcept(except), {});
}

/// raises the specified floating-point exceptions
inline int __cdecl feraiseexcept(int except) {
  return __ywstd_switch(::feraiseexcept(except), {});
}

/// copies the state of the specified floating-point status flags from the floating-point environment
inline int __cdecl fegetexceptflag(fexcept_t* flag, int except) {
  return __ywstd_switch(::fegetexceptflag(flag, except), {});
}

/// copies the state of the specified floating-point status flags to the floating-point environment
inline int __cdecl fesetexceptflag(const fexcept_t* flag, int except) {
  return __ywstd_switch(::fesetexceptflag(flag, except), {});
}

/// gets rounding direction
inline int __cdecl fegetround() {
  return __ywstd_switch(::fegetround(), {});
}

/// sets rounding direction
inline int __cdecl fesetround(int mode) {
  return __ywstd_switch(::fesetround(mode), {});
}

/// saves the current floating-point environment
inline int __cdecl fegetenv(fenv_t* env) {
  return __ywstd_switch(::fegetenv(env), {});
}

/// installs the floating-point environment
inline int __cdecl fesetenv(const fenv_t* env) {
  return __ywstd_switch(::fesetenv(env), {});
}

/// saves the environment, clears all status flags and ignores all future errors
inline int __cdecl feholdexcept(fenv_t* env) {
  return __ywstd_switch(::feholdexcept(env), {});
}

/// restores the floating-point environment and raises the previously raised exceptions
inline int __cdecl feupdateenv(const fenv_t* env) {
  if (std::fesetenv(env) != 0) return 1;
  else if (int e = std::fetestexcept(FE_ALL_EXCEPT); std::feraiseexcept(e) != 0) return 1;
  else return 0;
}
}
#endif
