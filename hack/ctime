/// \file ctime
/// \copyright (c) 2025 ywx9.com

// clang-format off
#pragma once
#include "abc.h"

////////////////////////////////////////////////////////////////////////////////
// internal definitions

#if __ywstd_is_exported
extern "C" {
using clock_t = long;
using __time32_t = long;
using __time64_t = long long;
using time_t = __time64_t;
struct _timespec64 { long long tv_sec; long tv_nsec; };
long __cdecl clock();
char* __cdecl asctime(const tm*);
size_t __cdecl strftime(char*, size_t, const char*, const tm*);
char* __cdecl _ctime64(const long long*);
double __cdecl _difftime64(long long, long long);
tm* __cdecl _gmtime64(const long long*);
tm* __cdecl _localtime64(const long long*);
long long __cdecl _mktime64(tm*);
long long __cdecl _time64(long long*);
int __cdecl _timespec64_get(_timespec64*, int);
}
#endif

////////////////////////////////////////////////////////////////////////////////
// public definitions

#define CLOCKS_PER_SEC (static_cast<std::clock_t>(1000))

#if !__ywstd_is_imported
__ywstd_export namespace std {

using clock_t = long;
using time_t = long long;

inline clock_t __cdecl clock() {
  return __ywstd_switch(::clock(), {});
}

inline char* __cdecl asctime(const tm* t) {
  return __ywstd_switch(::asctime(t), {});
}

inline size_t __cdecl strftime(char* s, size_t n, const char* f, const tm* t) {
  return __ywstd_switch(::strftime(s, n, f, t), {});
}

inline char* __cdecl ctime(const time_t* t) {
  return __ywstd_switch(::_ctime64(reinterpret_cast<const long long*>(t)), {});
}
inline double __cdecl difftime(time_t t1, time_t t2) {
  return __ywstd_switch(::_difftime64(t1, t2), {});
}
inline tm* __cdecl gmtime(const time_t* t) {
  return __ywstd_switch(::_gmtime64(t), {});
}
inline tm* __cdecl localtime(const time_t* t) {
  return __ywstd_switch(::_localtime64(t), {});
}
inline time_t __cdecl mktime(tm* t) {
  return __ywstd_switch(::_mktime64(t), {});
}
inline time_t __cdecl time(time_t* t) {
  return __ywstd_switch(::_time64(t), {});
}
inline int __cdecl timespec_get(timespec* ts, int base) {
  return __ywstd_switch(::_timespec64_get(reinterpret_cast<_timespec64*>(ts), base), {});
}

}
#endif
